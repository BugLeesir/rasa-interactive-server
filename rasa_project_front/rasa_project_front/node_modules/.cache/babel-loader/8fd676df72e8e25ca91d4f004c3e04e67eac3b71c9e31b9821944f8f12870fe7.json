{"ast":null,"code":"import { Adder } from \"d3-array\";\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n  lambda00,\n  phi00,\n  lambda0,\n  cosPhi0,\n  sinPhi0;\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function () {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function () {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function () {\n    areaSum.add(tau);\n  }\n};\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n    sdLambda = dLambda >= 0 ? 1 : -1,\n    adLambda = sdLambda * dLambda,\n    cosPhi = cos(phi),\n    sinPhi = sin(phi),\n    k = sinPhi0 * sinPhi,\n    u = cosPhi0 * cosPhi + k * cos(adLambda),\n    v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\nexport default function (object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}","map":{"version":3,"names":["Adder","atan2","cos","quarterPi","radians","sin","tau","noop","stream","areaRingSum","areaSum","lambda00","phi00","lambda0","cosPhi0","sinPhi0","areaStream","point","lineStart","lineEnd","polygonStart","areaRingStart","areaRingEnd","polygonEnd","areaRing","add","sphere","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","object"],"sources":["E:/MyCodes/Rasa/rasa_project_for_windows/rasa_project_front/rasa_project_front/node_modules/d3-geo/src/area.js"],"sourcesContent":["import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}