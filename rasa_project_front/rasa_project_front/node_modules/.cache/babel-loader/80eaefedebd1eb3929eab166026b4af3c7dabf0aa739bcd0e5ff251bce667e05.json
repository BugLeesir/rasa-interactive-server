{"ast":null,"code":"import clip from \"./index.js\";\nimport { abs, atan, cos, epsilon, halfPi, pi, sin } from \"../math.js\";\nexport default clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n    phi0 = NaN,\n    sign0 = NaN,\n    clean; // no intersections\n\n  return {\n    lineStart: function () {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function (lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n        delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function () {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function () {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n    cosPhi1,\n    sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}","map":{"version":3,"names":["clip","abs","atan","cos","epsilon","halfPi","pi","sin","clipAntimeridianLine","clipAntimeridianInterpolate","stream","lambda0","NaN","phi0","sign0","clean","lineStart","point","lambda1","phi1","sign1","delta","lineEnd","clipAntimeridianIntersect","cosPhi0","cosPhi1","sinLambda0Lambda1","from","to","direction","phi","lambda"],"sources":["E:/MyCodes/Rasa/rasa_project_for_windows/rasa_project_front/rasa_project_front/node_modules/d3-geo/src/clip/antimeridian.js"],"sourcesContent":["import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}