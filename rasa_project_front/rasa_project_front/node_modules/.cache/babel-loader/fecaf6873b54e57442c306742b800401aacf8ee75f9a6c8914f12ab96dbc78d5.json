{"ast":null,"code":"import axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport * as d3 from \"d3\";\nexport default {\n  name: \"Charts\",\n  methods: {\n    fetchData() {\n      axios.get(\"/charts/get_water_flow_data\").then(response => {\n        const data = response.data;\n        const waterLevelData = data.map(item => [item.time, item.water_level]);\n        const flowRateData = data.map(item => [item.time, item.flow_rate]);\n        Highcharts.chart(\"waterFlowChart\", {\n          title: {\n            text: \"水位流量关系线\"\n          },\n          xAxis: {\n            title: {\n              text: \"Time\"\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Value\"\n            }\n          },\n          series: [{\n            name: \"Water Level\",\n            data: waterLevelData\n          }, {\n            name: \"Flow Rate\",\n            data: flowRateData\n          }]\n        });\n      }).catch(error => {\n        console.log(\"获取数据失败：\" + error);\n      });\n    },\n    fetchGraphData() {\n      axios.post(\"/charts/get_graph_data\").then(response => {\n        this.drawGraph(response.data);\n      }).catch(error => {\n        console.log(\"获取知识图谱数据失败：\" + error);\n      });\n    },\n    drawGraph(graphData) {\n      const svg = d3.select(this.$refs.graphContainer);\n\n      // 清空现有的 SVG 内容\n      svg.selectAll('*').remove();\n\n      // 设置 SVG 尺寸\n      const width = 1200;\n      const height = 800;\n      svg.attr('width', width).attr('height', height);\n\n      // 创建一个力导向布局\n      const simulation = d3.forceSimulation(graphData.nodes).force('link', d3.forceLink(graphData.edges).id(d => d.id).distance(100)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2));\n\n      // 创建箭头\n      svg.append('defs').selectAll('marker').data(['arrow']) // 定义箭头的名称\n      .enter().append('marker').attr('id', d => d).attr('viewBox', '0 -5 10 10').attr('refX', 20) // 控制箭头位置\n      .attr('refY', 0).attr('markerWidth', 6).attr('markerHeight', 6).attr('orient', 'auto') // 根据路径自动定向箭头\n      .append('path').attr('d', 'M0,-5L10,0L0,5').attr('class', 'arrowhead'); // 自定义箭头的样式\n\n      // 绘制边\n      const links = svg.selectAll('.link').data(graphData.edges).enter().append('line').attr('class', 'link').style('stroke', 'black') // 设置线段颜色\n      .style('stroke-width', d => `${d.time}px`) // 根据时间设置线段宽度\n      .attr('marker-end', 'url(#arrow)'); // 引用箭头\n\n      // 在线段上标注时间\n      links.append('text').attr('class', 'time-label').attr('dy', -5) // 调整时间标签的垂直位置\n      .text(d => d.time); // 显示时间值\n\n      // 绘制节点\n      const nodes = svg.selectAll('.node').data(graphData.nodes).enter().append('g').attr('class', 'node');\n      nodes.append('circle').attr('r', 8).attr('fill', 'orange');\n\n      // 添加节点名称\n      nodes.append('text').text(d => d.name).attr('x', 12).attr('y', 4);\n\n      // 添加节点和边的交互\n      nodes.call(d3.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));\n\n      // 定义拖动开始、拖动过程和拖动结束的函数\n      function dragStarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n      function dragEnded(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      // 设置力导向布局的每一帧的动作\n      simulation.on('tick', () => {\n        links.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n        nodes.attr('transform', d => `translate(${d.x},${d.y})`);\n      });\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchGraphData();\n  }\n};","map":{"version":3,"names":["axios","Highcharts","d3","name","methods","fetchData","get","then","response","data","waterLevelData","map","item","time","water_level","flowRateData","flow_rate","chart","title","text","xAxis","yAxis","series","catch","error","console","log","fetchGraphData","post","drawGraph","graphData","svg","select","$refs","graphContainer","selectAll","remove","width","height","attr","simulation","forceSimulation","nodes","force","forceLink","edges","id","d","distance","forceManyBody","forceCenter","append","enter","links","style","call","drag","on","dragStarted","dragged","dragEnded","event","active","alphaTarget","restart","fx","x","fy","y","source","target","mounted"],"sources":["src/components/Charts.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n            <!-- SVG容器 -->\r\n      <svg ref=\"graphContainer\"></svg>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default {\r\n  name: \"Charts\",\r\n  methods: {\r\n    fetchData() {\r\n      axios.get(\"/charts/get_water_flow_data\")\r\n          .then(response => {\r\n            const data = response.data\r\n\r\n            const waterLevelData = data.map(item => [item.time, item.water_level])\r\n            const flowRateData = data.map(item => [item.time, item.flow_rate])\r\n\r\n            Highcharts.chart(\"waterFlowChart\", {\r\n              title: {\r\n                text: \"水位流量关系线\"\r\n              },\r\n              xAxis: {\r\n                title: {\r\n                  text: \"Time\"\r\n                }\r\n              },\r\n              yAxis: {\r\n                title: {\r\n                  text: \"Value\"\r\n                }\r\n              },\r\n              series: [{\r\n                name: \"Water Level\",\r\n                data: waterLevelData\r\n              }, {\r\n                name: \"Flow Rate\",\r\n                data: flowRateData\r\n              }]\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取数据失败：\" + error)\r\n          })\r\n    },\r\n    fetchGraphData() {\r\n      axios.post(\"/charts/get_graph_data\")\r\n          .then(response => {\r\n            this.drawGraph(response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取知识图谱数据失败：\" + error)\r\n          })\r\n      },\r\n      drawGraph(graphData) {\r\n        const svg = d3.select(this.$refs.graphContainer);\r\n\r\n        // 清空现有的 SVG 内容\r\n        svg.selectAll('*').remove();\r\n\r\n        // 设置 SVG 尺寸\r\n        const width = 1200;\r\n        const height = 800;\r\n        svg.attr('width', width).attr('height', height);\r\n\r\n        // 创建一个力导向布局\r\n        const simulation = d3.forceSimulation(graphData.nodes)\r\n          .force('link', d3.forceLink(graphData.edges).id(d => d.id).distance(100))\r\n          .force('charge', d3.forceManyBody())\r\n          .force('center', d3.forceCenter(width / 2, height / 2));\r\n\r\n        // 创建箭头\r\n        svg.append('defs').selectAll('marker')\r\n          .data(['arrow']) // 定义箭头的名称\r\n          .enter().append('marker')\r\n          .attr('id', d => d)\r\n          .attr('viewBox', '0 -5 10 10')\r\n          .attr('refX', 20) // 控制箭头位置\r\n          .attr('refY', 0)\r\n          .attr('markerWidth', 6)\r\n          .attr('markerHeight', 6)\r\n          .attr('orient', 'auto') // 根据路径自动定向箭头\r\n          .append('path')\r\n          .attr('d', 'M0,-5L10,0L0,5')\r\n          .attr('class', 'arrowhead'); // 自定义箭头的样式\r\n\r\n          // 绘制边\r\n          const links = svg.selectAll('.link')\r\n            .data(graphData.edges)\r\n            .enter().append('line')\r\n            .attr('class', 'link')\r\n            .style('stroke', 'black') // 设置线段颜色\r\n            .style('stroke-width', d => `${d.time}px`) // 根据时间设置线段宽度\r\n            .attr('marker-end', 'url(#arrow)'); // 引用箭头\r\n\r\n        // 在线段上标注时间\r\n        links.append('text')\r\n          .attr('class', 'time-label')\r\n          .attr('dy', -5) // 调整时间标签的垂直位置\r\n          .text(d => d.time); // 显示时间值\r\n\r\n\r\n        // 绘制节点\r\n        const nodes = svg.selectAll('.node')\r\n          .data(graphData.nodes)\r\n          .enter().append('g')\r\n          .attr('class', 'node');\r\n\r\n        nodes.append('circle')\r\n          .attr('r', 8)\r\n          .attr('fill', 'orange');\r\n\r\n        // 添加节点名称\r\n        nodes.append('text')\r\n          .text(d => d.name)\r\n          .attr('x', 12)\r\n          .attr('y', 4);\r\n\r\n        // 添加节点和边的交互\r\n        nodes.call(d3.drag()\r\n          .on('start', dragStarted)\r\n          .on('drag', dragged)\r\n          .on('end', dragEnded)\r\n        );\r\n\r\n        // 定义拖动开始、拖动过程和拖动结束的函数\r\n        function dragStarted(d) {\r\n          if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n\r\n        function dragged(d) {\r\n          d.fx = d3.event.x;\r\n          d.fy = d3.event.y;\r\n        }\r\n\r\n        function dragEnded(d) {\r\n          if (!d3.event.active) simulation.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n        }\r\n\r\n        // 设置力导向布局的每一帧的动作\r\n        simulation.on('tick', () => {\r\n          links.attr('x1', d => d.source.x)\r\n              .attr('y1', d => d.source.y)\r\n              .attr('x2', d => d.target.x)\r\n              .attr('y2', d => d.target.y);\r\n\r\n          nodes.attr('transform', d => `translate(${d.x},${d.y})`);\r\n        })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n    this.fetchGraphData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  div{\r\n    height:80vh;\r\n    .box-card{\r\n      width:100%;\r\n      height: 100%;\r\n      overflow: auto;\r\n    }\r\n\r\n    .link {\r\n      stroke: deepskyblue; /* 线段颜色 */\r\n      stroke-width: 2px; /* 线段宽度 */\r\n    }\r\n\r\n    .arrowhead {\r\n      fill: black; /* 箭头颜色 */\r\n    }\r\n\r\n\r\n    .node text {\r\n      font-size: 12px; /* 节点名称文本大小 */\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}