{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"Main\",\n  data() {\n    return {\n      questions: \"\",\n      messages: [],\n      imgSrc: null\n    };\n  },\n  methods: {\n    async onSubmit() {\n      this.imgSrc = null;\n      this.messages.push({\n        text: this.questions,\n        from: \"user\",\n        prompt: \"您：\"\n      });\n      const response = await axios.post(\"http://localhost:5005/webhooks/rest/webhook\", {\n        message: this.questions\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      // 交互处理\n      const data = response.data;\n      if (data.length === 0) {\n        this.messages.push({\n          text: \"出现错误，请重试。\",\n          from: \"rasa\",\n          prompt: \"\"\n        });\n        return;\n      }\n      for (let i = 0; i < data.length; i++) {\n        this.messages.push({\n          text: data[i].text,\n          from: \"rasa\",\n          prompt: \"防洪减灾机器人：\"\n        });\n      }\n      this.checkWaterFlow();\n      this.imgSrc = null;\n      this.questions = \"\";\n    },\n    checkWaterFlow() {\n      const stationNames = [\"沙市\", \"枝城\", \"寸滩\", \"桃源\", \"桃江\"];\n      let matchedStation = null;\n      for (const station of stationNames) {\n        if (this.questions.includes(station)) {\n          matchedStation = station;\n          break;\n        }\n      }\n      if (matchedStation) {\n        axios.post(\"/charts/get_water_flow_data\", {\n          place: matchedStation\n        }, {\n          responseType: \"blob\"\n        }).then(response => {\n          this.messages.push({\n            text: \"水位流量关系线如下：\",\n            from: \"rasa\",\n            prompt: \"防洪减灾机器人：\"\n          });\n          const blob = new Blob([response.data], {\n            type: \"image/png\"\n          });\n          const url = window.URL.createObjectURL(blob);\n          this.imgSrc = url;\n        }).catch(error => {\n          console.log(\"获取水位流量关系线图片失败：\" + error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","questions","messages","imgSrc","methods","onSubmit","push","text","from","prompt","response","post","message","headers","length","i","checkWaterFlow","stationNames","matchedStation","station","includes","place","responseType","then","blob","Blob","type","url","window","URL","createObjectURL","catch","error","console","log"],"sources":["src/components/Main.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n      <div class=\"chat-window\">\r\n        <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\" :class=\"{ 'user-message': message.from === 'user', 'rasa-message': message.from === 'rasa' }\">\r\n          <span class=\"prompt\">{{message.prompt}}</span>\r\n          {{ message.text }}\r\n          <img :src=\"imgSrc\" alt=\"Water Flow Chart\">\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"form-div\">\r\n        <el-input  @keyup.enter=\"onSubmit\" placeholder=\"请输入您的问题...\" v-model=\"questions\" class=\"questions\"></el-input>\r\n        <el-button type=\"primary\" @click=\"onSubmit\">发送</el-button>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from \"axios\"\r\nexport default {\r\n  name: \"Main\",\r\n  data(){\r\n    return {\r\n      questions:\"\",\r\n      messages:[],\r\n      imgSrc:null\r\n    }\r\n  },\r\n  methods:{\r\n    async onSubmit() {\r\n      this.imgSrc=null\r\n      this.messages.push({text:this.questions,from:\"user\",prompt:\"您：\"})\r\n      const response = await axios.post(\"http://localhost:5005/webhooks/rest/webhook\", {\r\n        message: this.questions\r\n      }, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n      // 交互处理\r\n      const data = response.data\r\n      if(data.length===0){\r\n        this.messages.push({text:\"出现错误，请重试。\",from:\"rasa\",prompt:\"\"})\r\n        return\r\n      }\r\n      for (let i = 0; i < data.length; i++) {\r\n        this.messages.push({text:data[i].text,from:\"rasa\",prompt:\"防洪减灾机器人：\"})\r\n      }\r\n\r\n      this.checkWaterFlow()\r\n      this.imgSrc=null\r\n      this.questions=\"\"\r\n\r\n    },\r\n    checkWaterFlow(){\r\n      const stationNames=[\"沙市\",\"枝城\",\"寸滩\",\"桃源\",\"桃江\"]\r\n      let matchedStation=null\r\n\r\n      for (const station of stationNames){\r\n        if(this.questions.includes(station)){\r\n          matchedStation=station\r\n          break\r\n        }\r\n      }\r\n      if(matchedStation){\r\n        axios.post(\"/charts/get_water_flow_data\",{place:matchedStation},{responseType:\"blob\"})\r\n            .then(response=>{\r\n              this.messages.push({text:\"水位流量关系线如下：\",from:\"rasa\",prompt:\"防洪减灾机器人：\"})\r\n\r\n              const blob = new Blob([response.data],{type:\"image/png\"})\r\n              const url=window.URL.createObjectURL(blob)\r\n              this.imgSrc=url\r\n            })\r\n            .catch(error=>{\r\n              console.log(\"获取水位流量关系线图片失败：\"+error)\r\n            })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n.box-card{\r\n  height:80vh;\r\n  position:relative;\r\n\r\n  .chat-window{\r\n    overflow-y: auto;\r\n    height: 500px;\r\n\r\n    .prompt{\r\n      font-weight: bolder;\r\n    }\r\n\r\n    .message{\r\n      height: 40px;\r\n      line-height: 40px;\r\n      font-size:16px;\r\n    }\r\n    .user-message{\r\n      background-color: #F9F9F9;\r\n    }\r\n  }\r\n\r\n  .form-div{\r\n    position:absolute;\r\n    bottom:10px;\r\n    width: 1200px;\r\n\r\n    display: flex;\r\n    justify-content: space-around;\r\n\r\n    .questions{\r\n      margin-right: 40px;\r\n    }\r\n  }\r\n}\r\n</style>"],"mappings":";;;;AAqBA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,QAAA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,SAAA;MACA,KAAAF,MAAA;MACA,KAAAD,QAAA,CAAAI,IAAA;QAAAC,IAAA,OAAAN,SAAA;QAAAO,IAAA;QAAAC,MAAA;MAAA;MACA,MAAAC,QAAA,SAAAZ,KAAA,CAAAa,IAAA;QACAC,OAAA,OAAAX;MACA;QACAY,OAAA;UACA;QACA;MACA;MACA;MACA,MAAAb,IAAA,GAAAU,QAAA,CAAAV,IAAA;MACA,IAAAA,IAAA,CAAAc,MAAA;QACA,KAAAZ,QAAA,CAAAI,IAAA;UAAAC,IAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QACA;MACA;MACA,SAAAM,CAAA,MAAAA,CAAA,GAAAf,IAAA,CAAAc,MAAA,EAAAC,CAAA;QACA,KAAAb,QAAA,CAAAI,IAAA;UAAAC,IAAA,EAAAP,IAAA,CAAAe,CAAA,EAAAR,IAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;MACA;MAEA,KAAAO,cAAA;MACA,KAAAb,MAAA;MACA,KAAAF,SAAA;IAEA;IACAe,eAAA;MACA,MAAAC,YAAA;MACA,IAAAC,cAAA;MAEA,WAAAC,OAAA,IAAAF,YAAA;QACA,SAAAhB,SAAA,CAAAmB,QAAA,CAAAD,OAAA;UACAD,cAAA,GAAAC,OAAA;UACA;QACA;MACA;MACA,IAAAD,cAAA;QACApB,KAAA,CAAAa,IAAA;UAAAU,KAAA,EAAAH;QAAA;UAAAI,YAAA;QAAA,GACAC,IAAA,CAAAb,QAAA;UACA,KAAAR,QAAA,CAAAI,IAAA;YAAAC,IAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAEA,MAAAe,IAAA,OAAAC,IAAA,EAAAf,QAAA,CAAAV,IAAA;YAAA0B,IAAA;UAAA;UACA,MAAAC,GAAA,GAAAC,MAAA,CAAAC,GAAA,CAAAC,eAAA,CAAAN,IAAA;UACA,KAAArB,MAAA,GAAAwB,GAAA;QACA,GACAI,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAC,GAAA,oBAAAF,KAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}