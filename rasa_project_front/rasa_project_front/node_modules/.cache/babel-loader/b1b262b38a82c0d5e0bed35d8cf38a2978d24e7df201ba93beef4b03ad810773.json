{"ast":null,"code":"import axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport * as d3 from \"d3\";\nexport default {\n  name: \"Charts\",\n  methods: {\n    fetchData() {\n      axios.get(\"/charts/get_water_flow_data\").then(response => {\n        const data = response.data;\n        const waterLevelData = data.map(item => [item.time, item.water_level]);\n        const flowRateData = data.map(item => [item.time, item.flow_rate]);\n        Highcharts.chart(\"waterFlowChart\", {\n          title: {\n            text: \"水位流量关系线\"\n          },\n          xAxis: {\n            title: {\n              text: \"Time\"\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Value\"\n            }\n          },\n          series: [{\n            name: \"Water Level\",\n            data: waterLevelData\n          }, {\n            name: \"Flow Rate\",\n            data: flowRateData\n          }]\n        });\n      }).catch(error => {\n        console.log(\"获取数据失败：\" + error);\n      });\n    },\n    fetchGraphData() {\n      axios.post(\"/charts/get_graph_data\").then(response => {\n        this.drawGraph(response.data);\n      }).catch(error => {\n        console.log(\"获取知识图谱数据失败：\" + error);\n      });\n    },\n    drawGraph(graphData) {\n      const svg = d3.select(this.$refs.graphContainer);\n\n      // 清空现有的 SVG 内容\n      svg.selectAll('*').remove();\n\n      // 设置 SVG 尺寸为百分比\n      const width = 600;\n      const height = 600;\n      svg.attr('width', width).attr('height', height);\n\n      // 创建一个力导向布局\n      const simulation = d3.forceSimulation(graphData.nodes).force('link', d3.forceLink(graphData.edges).id(d => d.id).distance(100)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2));\n\n      // 绘制边\n      const links = svg.selectAll('.link').data(graphData.edges).enter().append('g').attr('class', 'link-group');\n\n      // 绘制箭头\n      links.append('line').attr('class', 'link').attr('stroke', 'blue').attr('stroke-width', 1).attr('opacity', d => d.value).attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      links.append('marker').attr('id', (d, i) => `arrow${i}`).attr('markerWidth', 10).attr('markerHeight', 10).attr('refX', 9).attr('refY', 3).attr('orient', 'auto').append('path').attr('d', 'M0,0 L0,6 L9,3 z').attr('fill', 'blue');\n      links.append('line').attr('class', 'arrow-line').attr('stroke', 'blue').attr('stroke-width', 1).attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y).attr('marker-end', (d, i) => `url(#arrow${i})`);\n\n      // 添加边的标签\n      const linkLabels = svg.selectAll('.link-label').data(graphData.edges).enter().append('text').attr('class', 'link-label').text(d => d.value.toFixed(0)) // 将边的值显示在边的中间\n      .attr('x', d => (d.source.x + d.target.x) / 2).attr('y', d => (d.source.y + d.target.y) / 2).attr('dy', -3);\n\n      // 绘制节点\n      const nodes = svg.selectAll('.node').data(graphData.nodes).enter().append('circle').attr('class', 'node').attr('r', 8).attr('fill', 'orange')\n      // 添加节点拖拽交互\n      .call(d3.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));\n\n      // 添加节点标签\n      const nodeLabels = svg.selectAll('.node-label').data(graphData.nodes).enter().append('text').attr('class', 'node-label').text(d => d.name).attr('dy', 5); // 将标签稍微下移以避免重叠\n\n      // ... 添加交互和其他代码 ...\n\n      // 定义拖动开始、拖动过程和拖动结束的函数\n      function dragStarted(event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      function dragged(event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n      function dragEnded(event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      // 设置力导向布局的每一帧的动作\n      simulation.on('tick', () => {\n        links.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n        linkLabels.attr('x', d => (d.source.x + d.target.x) / 2).attr('y', d => (d.source.y + d.target.y) / 2);\n        nodes.attr('cx', d => d.x).attr('cy', d => d.y);\n        nodeLabels.attr('x', d => d.x).attr('y', d => d.y + 15); // 将标签稍微下移以避免重叠\n      });\n    }\n  },\n\n  mounted() {\n    this.fetchData();\n    this.fetchGraphData();\n  }\n};","map":{"version":3,"names":["axios","Highcharts","d3","name","methods","fetchData","get","then","response","data","waterLevelData","map","item","time","water_level","flowRateData","flow_rate","chart","title","text","xAxis","yAxis","series","catch","error","console","log","fetchGraphData","post","drawGraph","graphData","svg","select","$refs","graphContainer","selectAll","remove","width","height","attr","simulation","forceSimulation","nodes","force","forceLink","edges","id","d","distance","forceManyBody","forceCenter","links","enter","append","value","source","x","y","target","i","linkLabels","toFixed","call","drag","on","dragStarted","dragged","dragEnded","nodeLabels","event","active","alphaTarget","restart","fx","fy","mounted"],"sources":["src/components/Charts.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"box-card-left\">\r\n      <el-card class=\"box-card\">\r\n        <div id=\"waterFlowChart\"></div>\r\n      </el-card>\r\n    </div>\r\n    <div class=\"box-card-right\">\r\n      <el-card class=\"box-card\">\r\n        <svg ref=\"graphContainer\"></svg>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default {\r\n  name: \"Charts\",\r\n  methods: {\r\n    fetchData() {\r\n      axios.get(\"/charts/get_water_flow_data\")\r\n          .then(response => {\r\n            const data = response.data\r\n\r\n            const waterLevelData = data.map(item => [item.time, item.water_level])\r\n            const flowRateData = data.map(item => [item.time, item.flow_rate])\r\n\r\n            Highcharts.chart(\"waterFlowChart\", {\r\n              title: {\r\n                text: \"水位流量关系线\"\r\n              },\r\n              xAxis: {\r\n                title: {\r\n                  text: \"Time\"\r\n                }\r\n              },\r\n              yAxis: {\r\n                title: {\r\n                  text: \"Value\"\r\n                }\r\n              },\r\n              series: [{\r\n                name: \"Water Level\",\r\n                data: waterLevelData\r\n              }, {\r\n                name: \"Flow Rate\",\r\n                data: flowRateData\r\n              }]\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取数据失败：\" + error)\r\n          })\r\n    },\r\n    fetchGraphData() {\r\n      axios.post(\"/charts/get_graph_data\")\r\n          .then(response => {\r\n            this.drawGraph(response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取知识图谱数据失败：\" + error)\r\n          })\r\n    },\r\n    drawGraph(graphData) {\r\n      const svg = d3.select(this.$refs.graphContainer);\r\n\r\n      // 清空现有的 SVG 内容\r\n      svg.selectAll('*').remove();\r\n\r\n      // 设置 SVG 尺寸为百分比\r\n      const width = 600;\r\n      const height = 600;\r\n      svg.attr('width', width).attr('height', height);\r\n\r\n      // 创建一个力导向布局\r\n      const simulation = d3.forceSimulation(graphData.nodes)\r\n          .force('link', d3.forceLink(graphData.edges).id(d => d.id).distance(100))\r\n          .force('charge', d3.forceManyBody())\r\n          .force('center', d3.forceCenter(width / 2, height / 2));\r\n\r\n      // 绘制边\r\n      const links = svg.selectAll('.link')\r\n        .data(graphData.edges)\r\n        .enter().append('g')\r\n        .attr('class', 'link-group');\r\n\r\n      // 绘制箭头\r\n      links.append('line')\r\n        .attr('class', 'link')\r\n        .attr('stroke', 'blue')\r\n        .attr('stroke-width', 1)\r\n        .attr('opacity', d => d.value)\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y);\r\n\r\n      links.append('marker')\r\n        .attr('id', (d, i) => `arrow${i}`)\r\n        .attr('markerWidth', 10)\r\n        .attr('markerHeight', 10)\r\n        .attr('refX', 9)\r\n        .attr('refY', 3)\r\n        .attr('orient', 'auto')\r\n        .append('path')\r\n        .attr('d', 'M0,0 L0,6 L9,3 z')\r\n        .attr('fill', 'blue');\r\n\r\n      links.append('line')\r\n        .attr('class', 'arrow-line')\r\n        .attr('stroke', 'blue')\r\n        .attr('stroke-width', 1)\r\n        .attr('x1', d => d.source.x)\r\n        .attr('y1', d => d.source.y)\r\n        .attr('x2', d => d.target.x)\r\n        .attr('y2', d => d.target.y)\r\n        .attr('marker-end', (d, i) => `url(#arrow${i})`);\r\n\r\n\r\n      // 添加边的标签\r\n      const linkLabels = svg.selectAll('.link-label')\r\n          .data(graphData.edges)\r\n          .enter().append('text')\r\n          .attr('class', 'link-label')\r\n          .text(d => d.value.toFixed(0)) // 将边的值显示在边的中间\r\n          .attr('x', d => (d.source.x + d.target.x) / 2)\r\n          .attr('y', d => (d.source.y + d.target.y) / 2)\r\n          .attr('dy', -3);\r\n\r\n      // 绘制节点\r\n      const nodes = svg.selectAll('.node')\r\n          .data(graphData.nodes)\r\n          .enter().append('circle')\r\n          .attr('class', 'node')\r\n          .attr('r', 8)\r\n          .attr('fill', 'orange')\r\n          // 添加节点拖拽交互\r\n          .call(d3.drag()\r\n              .on('start', dragStarted)\r\n              .on('drag', dragged)\r\n              .on('end', dragEnded)\r\n          );\r\n\r\n      // 添加节点标签\r\n      const nodeLabels = svg.selectAll('.node-label')\r\n          .data(graphData.nodes)\r\n          .enter().append('text')\r\n          .attr('class', 'node-label')\r\n          .text(d => d.name)\r\n          .attr('dy', 5); // 将标签稍微下移以避免重叠\r\n\r\n      // ... 添加交互和其他代码 ...\r\n\r\n      // 定义拖动开始、拖动过程和拖动结束的函数\r\n      function dragStarted(event, d) {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n\r\n      function dragged(event, d) {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n\r\n      function dragEnded(event, d) {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        d.fx = null;\r\n        d.fy = null;\r\n      }\r\n\r\n      // 设置力导向布局的每一帧的动作\r\n      simulation.on('tick', () => {\r\n        links.attr('x1', d => d.source.x)\r\n            .attr('y1', d => d.source.y)\r\n            .attr('x2', d => d.target.x)\r\n            .attr('y2', d => d.target.y);\r\n\r\n        linkLabels\r\n            .attr('x', d => (d.source.x + d.target.x) / 2)\r\n            .attr('y', d => (d.source.y + d.target.y) / 2);\r\n\r\n        nodes.attr('cx', d => d.x)\r\n            .attr('cy', d => d.y);\r\n\r\n        nodeLabels\r\n            .attr('x', d => d.x)\r\n            .attr('y', d => d.y + 15); // 将标签稍微下移以避免重叠\r\n      })\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchData()\r\n    this.fetchGraphData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  div{\r\n    height:80vh;\r\n    .box-card-left{\r\n      float:left;\r\n      width: 48%;\r\n      height:100%;\r\n      margin-right:20px;\r\n    }\r\n    .box-card-right{\r\n      float:left;\r\n      width:50%;\r\n\r\n      .link {\r\n        stroke: #ccc;\r\n        stroke-width: 1.5px;\r\n      }\r\n      .node {\r\n        stroke: #fff;\r\n        stroke-width: 1.5px;\r\n}\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}