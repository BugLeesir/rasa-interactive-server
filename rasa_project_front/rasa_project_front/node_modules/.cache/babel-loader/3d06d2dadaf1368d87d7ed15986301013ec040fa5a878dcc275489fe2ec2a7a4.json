{"ast":null,"code":"import axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport * as d3 from \"d3\";\nexport default {\n  name: \"Charts\",\n  methods: {\n    fetchData() {\n      axios.get(\"/charts/get_water_flow_data\").then(response => {\n        const data = response.data;\n        const waterLevelData = data.map(item => [item.time, item.water_level]);\n        const flowRateData = data.map(item => [item.time, item.flow_rate]);\n        Highcharts.chart(\"waterFlowChart\", {\n          title: {\n            text: \"水位流量关系线\"\n          },\n          xAxis: {\n            title: {\n              text: \"Time\"\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Value\"\n            }\n          },\n          series: [{\n            name: \"Water Level\",\n            data: waterLevelData\n          }, {\n            name: \"Flow Rate\",\n            data: flowRateData\n          }]\n        });\n      }).catch(error => {\n        console.log(\"获取数据失败：\" + error);\n      });\n    },\n    fetchGraphData() {\n      axios.post(\"/charts/get_graph_data\").then(response => {\n        this.drawGraph(response.data);\n        console.log(response.data);\n      }).catch(error => {\n        console.log(\"获取知识图谱数据失败：\" + error);\n      });\n    },\n    drawGraph(graphData) {\n      // 创建SVG容器\n      const svg = d3.select(\"svg\"),\n        width = +svg.attr(\"width\"),\n        height = +svg.attr(\"height\");\n\n      // 创建一个力导向图布局\n      const simulation = d3.forceSimulation().nodes(graphData.nodes);\n\n      // 添加力导向图中的边\n      const linkForce = d3.forceLink(graphData.edges.source.map(d => graphData.nodes.indexOf(d))).links(graphData.edges.target.map((d, i) => ({\n        source: graphData.edges.source[i],\n        target: d,\n        time: graphData.edges.time[i]\n      }))).distance(100);\n\n      // 添加力导向图中的节点\n      const nodeForce = d3.forceManyBody().strength(-100);\n\n      // 将力导向图布局的力设置为边和节点的力\n      simulation.force(\"link\", linkForce).force(\"charge\", nodeForce);\n\n      // 创建边的线段\n      const link = svg.selectAll(\".link\").data(graphData.edges.target).enter().append(\"line\").attr(\"class\", \"link\");\n\n      // 创建节点的圆圈\n      const node = svg.selectAll(\".node\").data(graphData.nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", 8);\n\n      // 设置节点和边的位置\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n\n      // 启动力导向图布局\n      simulation.restart();\n    },\n    mounted() {\n      this.fetchData();\n      this.fetchGraphData();\n    }\n  }\n};","map":{"version":3,"names":["axios","Highcharts","d3","name","methods","fetchData","get","then","response","data","waterLevelData","map","item","time","water_level","flowRateData","flow_rate","chart","title","text","xAxis","yAxis","series","catch","error","console","log","fetchGraphData","post","drawGraph","graphData","svg","select","width","attr","height","simulation","forceSimulation","nodes","linkForce","forceLink","edges","source","d","indexOf","links","target","i","distance","nodeForce","forceManyBody","strength","force","link","selectAll","enter","append","node","on","x","y","restart","mounted"],"sources":["src/components/Charts.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"box-card-left\">\r\n      <el-card class=\"box-card\">\r\n        <div id=\"waterFlowChart\"></div>\r\n      </el-card>\r\n    </div>\r\n    <div class=\"box-card-right\">\r\n      <el-card class=\"box-card\">\r\n        <svg ref=\"graphContainer\"></svg>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default {\r\n  name: \"Charts\",\r\n  methods: {\r\n    fetchData() {\r\n      axios.get(\"/charts/get_water_flow_data\")\r\n          .then(response => {\r\n            const data = response.data\r\n\r\n            const waterLevelData = data.map(item => [item.time, item.water_level])\r\n            const flowRateData = data.map(item => [item.time, item.flow_rate])\r\n\r\n            Highcharts.chart(\"waterFlowChart\", {\r\n              title: {\r\n                text: \"水位流量关系线\"\r\n              },\r\n              xAxis: {\r\n                title: {\r\n                  text: \"Time\"\r\n                }\r\n              },\r\n              yAxis: {\r\n                title: {\r\n                  text: \"Value\"\r\n                }\r\n              },\r\n              series: [{\r\n                name: \"Water Level\",\r\n                data: waterLevelData\r\n              }, {\r\n                name: \"Flow Rate\",\r\n                data: flowRateData\r\n              }]\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取数据失败：\" + error)\r\n          })\r\n    },\r\n    fetchGraphData() {\r\n      axios.post(\"/charts/get_graph_data\")\r\n          .then(response => {\r\n            this.drawGraph(response.data)\r\n            console.log(response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取知识图谱数据失败：\" + error)\r\n          })\r\n    },\r\n    drawGraph(graphData) {\r\n      // 创建SVG容器\r\n      const svg = d3.select(\"svg\"),\r\n          width = +svg.attr(\"width\"),\r\n          height = +svg.attr(\"height\");\r\n\r\n      // 创建一个力导向图布局\r\n      const simulation = d3.forceSimulation()\r\n          .nodes(graphData.nodes);\r\n\r\n      // 添加力导向图中的边\r\n      const linkForce = d3.forceLink(graphData.edges.source.map(d => graphData.nodes.indexOf(d)))\r\n          .links(graphData.edges.target.map((d, i) => ({\r\n            source: graphData.edges.source[i],\r\n            target: d,\r\n            time: graphData.edges.time[i]\r\n          })))\r\n          .distance(100);\r\n\r\n      // 添加力导向图中的节点\r\n      const nodeForce = d3.forceManyBody()\r\n          .strength(-100);\r\n\r\n      // 将力导向图布局的力设置为边和节点的力\r\n      simulation\r\n          .force(\"link\", linkForce)\r\n          .force(\"charge\", nodeForce);\r\n\r\n      // 创建边的线段\r\n      const link = svg.selectAll(\".link\")\r\n          .data(graphData.edges.target)\r\n          .enter().append(\"line\")\r\n          .attr(\"class\", \"link\");\r\n\r\n      // 创建节点的圆圈\r\n      const node = svg.selectAll(\".node\")\r\n          .data(graphData.nodes)\r\n          .enter().append(\"circle\")\r\n          .attr(\"class\", \"node\")\r\n          .attr(\"r\", 8);\r\n\r\n      // 设置节点和边的位置\r\n      simulation.on(\"tick\", () => {\r\n        link\r\n            .attr(\"x1\", d => d.source.x)\r\n            .attr(\"y1\", d => d.source.y)\r\n            .attr(\"x2\", d => d.target.x)\r\n            .attr(\"y2\", d => d.target.y);\r\n\r\n        node\r\n            .attr(\"cx\", d => d.x)\r\n            .attr(\"cy\", d => d.y);\r\n      });\r\n\r\n      // 启动力导向图布局\r\n      simulation.restart();\r\n    },\r\n    mounted() {\r\n      this.fetchData()\r\n      this.fetchGraphData()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  div{\r\n    height:80vh;\r\n    .box-card-left{\r\n      float:left;\r\n      width: 48%;\r\n      height:100%;\r\n      margin-right:20px;\r\n    }\r\n    .box-card-right{\r\n      float:left;\r\n      width:50%;\r\n\r\n      .link {\r\n        stroke: blue;\r\n        stroke-width: 1.5px;\r\n      }\r\n      .node {\r\n        stroke: #fff;\r\n        stroke-width: 1.5px;\r\n}\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}