{"ast":null,"code":"import axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport * as d3 from \"d3\";\nexport default {\n  name: \"Charts\",\n  methods: {\n    fetchData() {\n      axios.get(\"/charts/get_water_flow_data\").then(response => {\n        const data = response.data;\n        const waterLevelData = data.map(item => [item.time, item.water_level]);\n        const flowRateData = data.map(item => [item.time, item.flow_rate]);\n        Highcharts.chart(\"waterFlowChart\", {\n          title: {\n            text: \"水位流量关系线\"\n          },\n          xAxis: {\n            title: {\n              text: \"Time\"\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Value\"\n            }\n          },\n          series: [{\n            name: \"Water Level\",\n            data: waterLevelData\n          }, {\n            name: \"Flow Rate\",\n            data: flowRateData\n          }]\n        });\n      }).catch(error => {\n        console.log(\"获取数据失败：\" + error);\n      });\n    },\n    fetchGraphData() {\n      axios.post(\"/charts/get_graph_data\").then(response => {\n        this.drawGraph(response.data);\n      }).catch(error => {\n        console.log(\"获取知识图谱数据失败：\" + error);\n      });\n    },\n    drawGraph(graphData) {\n      const graphContainer = this.$refs.graphContainer;\n\n      // 创建一个SVG容器\n      const svg = d3.select(graphContainer).attr(\"width\", 800).attr(\"height\", 600);\n\n      // 创建一个力导向图布局\n      const simulation = d3.forceSimulation(this.graphData.nodes).force(\"link\", d3.forceLink(this.graphData.edges).id(d => d.id)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(400, 300));\n\n      // 创建边的线段\n      const link = svg.selectAll(\".link\").data(this.graphData.edges).enter().append(\"line\").attr(\"class\", \"link\");\n\n      // 创建节点的圆圈\n      const node = svg.selectAll(\".node\").data(this.graphData.nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", 8);\n\n      // 设置节点和边的位置\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      });\n\n      // 启动力导向图布局\n      simulation.restart();\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchGraphData();\n  }\n};","map":{"version":3,"names":["axios","Highcharts","d3","name","methods","fetchData","get","then","response","data","waterLevelData","map","item","time","water_level","flowRateData","flow_rate","chart","title","text","xAxis","yAxis","series","catch","error","console","log","fetchGraphData","post","drawGraph","graphData","graphContainer","$refs","svg","select","attr","simulation","forceSimulation","nodes","force","forceLink","edges","id","d","forceManyBody","forceCenter","link","selectAll","enter","append","node","on","source","x","y","target","restart","mounted"],"sources":["src/components/Charts.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"box-card-left\">\r\n      <el-card class=\"box-card\">\r\n        <div id=\"waterFlowChart\"></div>\r\n      </el-card>\r\n    </div>\r\n    <div class=\"box-card-right\">\r\n      <el-card class=\"box-card\">\r\n        <svg ref=\"graphContainer\"></svg>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default {\r\n  name: \"Charts\",\r\n  methods: {\r\n    fetchData() {\r\n      axios.get(\"/charts/get_water_flow_data\")\r\n          .then(response => {\r\n            const data = response.data\r\n\r\n            const waterLevelData = data.map(item => [item.time, item.water_level])\r\n            const flowRateData = data.map(item => [item.time, item.flow_rate])\r\n\r\n            Highcharts.chart(\"waterFlowChart\", {\r\n              title: {\r\n                text: \"水位流量关系线\"\r\n              },\r\n              xAxis: {\r\n                title: {\r\n                  text: \"Time\"\r\n                }\r\n              },\r\n              yAxis: {\r\n                title: {\r\n                  text: \"Value\"\r\n                }\r\n              },\r\n              series: [{\r\n                name: \"Water Level\",\r\n                data: waterLevelData\r\n              }, {\r\n                name: \"Flow Rate\",\r\n                data: flowRateData\r\n              }]\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取数据失败：\" + error)\r\n          })\r\n    },\r\n    fetchGraphData() {\r\n      axios.post(\"/charts/get_graph_data\")\r\n          .then(response => {\r\n            this.drawGraph(response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取知识图谱数据失败：\" + error)\r\n          })\r\n    },\r\n    drawGraph(graphData) {\r\n      const graphContainer = this.$refs.graphContainer;\r\n\r\n      // 创建一个SVG容器\r\n      const svg = d3\r\n        .select(graphContainer)\r\n        .attr(\"width\", 800)\r\n        .attr(\"height\", 600);\r\n\r\n      // 创建一个力导向图布局\r\n      const simulation = d3\r\n        .forceSimulation(this.graphData.nodes)\r\n        .force(\"link\", d3.forceLink(this.graphData.edges).id((d) => d.id))\r\n        .force(\"charge\", d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(400, 300));\r\n\r\n      // 创建边的线段\r\n      const link = svg\r\n        .selectAll(\".link\")\r\n        .data(this.graphData.edges)\r\n        .enter()\r\n        .append(\"line\")\r\n        .attr(\"class\", \"link\");\r\n\r\n      // 创建节点的圆圈\r\n      const node = svg\r\n        .selectAll(\".node\")\r\n        .data(this.graphData.nodes)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"node\")\r\n        .attr(\"r\", 8);\r\n\r\n      // 设置节点和边的位置\r\n      simulation.on(\"tick\", () => {\r\n        link\r\n          .attr(\"x1\", (d) => d.source.x)\r\n          .attr(\"y1\", (d) => d.source.y)\r\n          .attr(\"x2\", (d) => d.target.x)\r\n          .attr(\"y2\", (d) => d.target.y);\r\n\r\n        node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n      });\r\n\r\n      // 启动力导向图布局\r\n      simulation.restart();\r\n    }\r\n  },\r\n    mounted() {\r\n      this.fetchData()\r\n      this.fetchGraphData()\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  div{\r\n    height:80vh;\r\n    .box-card-left{\r\n      float:left;\r\n      width: 48%;\r\n      height:100%;\r\n      margin-right:20px;\r\n    }\r\n    .box-card-right{\r\n      float:left;\r\n      width:50%;\r\n\r\n      .link {\r\n        stroke: blue;\r\n        stroke-width: 1.5px;\r\n      }\r\n      .node {\r\n        stroke: #fff;\r\n        stroke-width: 1.5px;\r\n}\r\n    }\r\n  }\r\n</style>"],"mappings":"AAgBA,OAAAA,KAAA;AACA,OAAAC,UAAA;AACA,YAAAC,EAAA;AAEA;EACAC,IAAA;EACAC,OAAA;IACAC,UAAA;MACAL,KAAA,CAAAM,GAAA,gCACAC,IAAA,CAAAC,QAAA;QACA,MAAAC,IAAA,GAAAD,QAAA,CAAAC,IAAA;QAEA,MAAAC,cAAA,GAAAD,IAAA,CAAAE,GAAA,CAAAC,IAAA,KAAAA,IAAA,CAAAC,IAAA,EAAAD,IAAA,CAAAE,WAAA;QACA,MAAAC,YAAA,GAAAN,IAAA,CAAAE,GAAA,CAAAC,IAAA,KAAAA,IAAA,CAAAC,IAAA,EAAAD,IAAA,CAAAI,SAAA;QAEAf,UAAA,CAAAgB,KAAA;UACAC,KAAA;YACAC,IAAA;UACA;UACAC,KAAA;YACAF,KAAA;cACAC,IAAA;YACA;UACA;UACAE,KAAA;YACAH,KAAA;cACAC,IAAA;YACA;UACA;UACAG,MAAA;YACAnB,IAAA;YACAM,IAAA,EAAAC;UACA;YACAP,IAAA;YACAM,IAAA,EAAAM;UACA;QACA;MACA,GACAQ,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,aAAAF,KAAA;MACA;IACA;IACAG,eAAA;MACA3B,KAAA,CAAA4B,IAAA,2BACArB,IAAA,CAAAC,QAAA;QACA,KAAAqB,SAAA,CAAArB,QAAA,CAAAC,IAAA;MACA,GACAc,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,iBAAAF,KAAA;MACA;IACA;IACAK,UAAAC,SAAA;MACA,MAAAC,cAAA,QAAAC,KAAA,CAAAD,cAAA;;MAEA;MACA,MAAAE,GAAA,GAAA/B,EAAA,CACAgC,MAAA,CAAAH,cAAA,EACAI,IAAA,eACAA,IAAA;;MAEA;MACA,MAAAC,UAAA,GAAAlC,EAAA,CACAmC,eAAA,MAAAP,SAAA,CAAAQ,KAAA,EACAC,KAAA,SAAArC,EAAA,CAAAsC,SAAA,MAAAV,SAAA,CAAAW,KAAA,EAAAC,EAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAD,EAAA,GACAH,KAAA,WAAArC,EAAA,CAAA0C,aAAA,IACAL,KAAA,WAAArC,EAAA,CAAA2C,WAAA;;MAEA;MACA,MAAAC,IAAA,GAAAb,GAAA,CACAc,SAAA,UACAtC,IAAA,MAAAqB,SAAA,CAAAW,KAAA,EACAO,KAAA,GACAC,MAAA,SACAd,IAAA;;MAEA;MACA,MAAAe,IAAA,GAAAjB,GAAA,CACAc,SAAA,UACAtC,IAAA,MAAAqB,SAAA,CAAAQ,KAAA,EACAU,KAAA,GACAC,MAAA,WACAd,IAAA,kBACAA,IAAA;;MAEA;MACAC,UAAA,CAAAe,EAAA;QACAL,IAAA,CACAX,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAS,MAAA,CAAAC,CAAA,EACAlB,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAS,MAAA,CAAAE,CAAA,EACAnB,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAY,MAAA,CAAAF,CAAA,EACAlB,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAY,MAAA,CAAAD,CAAA;QAEAJ,IAAA,CAAAf,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAU,CAAA,EAAAlB,IAAA,OAAAQ,CAAA,IAAAA,CAAA,CAAAW,CAAA;MACA;;MAEA;MACAlB,UAAA,CAAAoB,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAApD,SAAA;IACA,KAAAsB,cAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}