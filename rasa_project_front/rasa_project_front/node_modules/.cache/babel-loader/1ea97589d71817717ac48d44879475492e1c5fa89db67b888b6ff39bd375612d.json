{"ast":null,"code":"import axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport * as d3 from \"d3\";\nexport default {\n  name: \"Charts\",\n  methods: {\n    fetchGraphData() {\n      axios.post(\"/charts/get_graph_data\").then(response => {\n        this.drawGraph(response.data);\n      }).catch(error => {\n        console.log(\"获取知识图谱数据失败：\" + error);\n      });\n    },\n    drawGraph(graphData) {\n      const svg = d3.select(this.$refs.graphContainer);\n\n      // 清空现有的 SVG 内容\n      svg.selectAll('*').remove();\n\n      // 设置 SVG 尺寸\n      const width = 900;\n      const height = 800;\n      svg.attr('width', width).attr('height', height);\n\n      // 创建箭头\n      svg.append('defs').selectAll('marker').data(['arrow']) // 定义箭头的名称\n      .enter().append('marker').attr('id', d => d).attr('viewBox', '0 -5 10 10').attr('refX', 20) // 控制箭头位置\n      .attr('refY', 0).attr('markerWidth', 6).attr('markerHeight', 6).attr('orient', 'auto') // 根据路径自动定向箭头\n      .append('path').attr('d', 'M0,-5L10,0L0,5').attr('class', 'arrowhead'); // 自定义箭头的样式\n\n      // 绘制边\n      const links = svg.selectAll('.link').data(graphData.edges).enter().append('line').attr('class', 'link').style('stroke', 'deepskyblue') // 设置线段颜色\n      .attr('marker-end', 'url(#arrow)'); // 引用箭头\n\n      // 在线段上标注时间\n      links.append('text').attr('class', 'time-label').attr('dy', -5) // 调整时间标签的垂直位置\n      .text(d => d.time); // 显示时间值\n\n      // 绘制节点\n      const nodes = svg.selectAll('.node').data(graphData.nodes).enter().append('g').attr('class', 'node');\n      nodes.append('circle').attr('r', 8).attr('fill', 'orange');\n\n      // 添加节点名称\n      nodes.append('text').text(d => d.name).attr('x', 12).attr('y', 4);\n\n      // 添加节点和边的交互\n      nodes.call(d3.drag().on('start', dragStarted).on('drag', dragged).on('end', dragEnded));\n\n      // 定义拖动开始、拖动过程和拖动结束的函数\n      function dragStarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n      function dragEnded(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      // 设置边的连接\n      links.each(function (d) {\n        const sourceNode = d3.select(this.parentNode).selectAll('.node').filter(node => node.name === d.source);\n        const targetNode = d3.select(this.parentNode).selectAll('.node').filter(node => node.name === d.target);\n        if (sourceNode && targetNode) {\n          const scaleFactor = 1;\n          // 计算线段长度，可以根据需要进行缩放\n          const length = d.time * scaleFactor; // 使用 scaleFactor 来控制长度\n          const angle = Math.atan2(targetNode.y - sourceNode.y, targetNode.x - sourceNode.x);\n          const x2 = sourceNode.x + length * Math.cos(angle);\n          const y2 = sourceNode.y + length * Math.sin(angle);\n          d3.select(this).attr('x1', sourceNode.x).attr('y1', sourceNode.y).attr('x2', x2).attr('y2', y2);\n        }\n      });\n\n      // 设置力导向布局的每一帧的动作\n      simulation.on('tick', () => {\n        links.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n        nodes.attr('transform', d => `translate(${d.x},${d.y})`);\n      });\n    }\n  },\n  mounted() {\n    this.fetchGraphData();\n  }\n};","map":{"version":3,"names":["axios","Highcharts","d3","name","methods","fetchGraphData","post","then","response","drawGraph","data","catch","error","console","log","graphData","svg","select","$refs","graphContainer","selectAll","remove","width","height","attr","append","enter","d","links","edges","style","text","time","nodes","call","drag","on","dragStarted","dragged","dragEnded","event","active","simulation","alphaTarget","restart","fx","x","fy","y","each","sourceNode","parentNode","filter","node","source","targetNode","target","scaleFactor","length","angle","Math","atan2","x2","cos","y2","sin","mounted"],"sources":["src/components/KnowledgeGraph.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-card class=\"box-card\">\r\n            <!-- SVG容器 -->\r\n      <svg ref=\"graphContainer\"></svg>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\"\r\nimport * as d3 from \"d3\"\r\n\r\nexport default {\r\n  name: \"Charts\",\r\n  methods: {\r\n    fetchGraphData() {\r\n      axios.post(\"/charts/get_graph_data\")\r\n          .then(response => {\r\n            this.drawGraph(response.data)\r\n          })\r\n          .catch(error => {\r\n            console.log(\"获取知识图谱数据失败：\" + error)\r\n          })\r\n      },\r\n      drawGraph(graphData) {\r\n        const svg = d3.select(this.$refs.graphContainer);\r\n\r\n        // 清空现有的 SVG 内容\r\n        svg.selectAll('*').remove();\r\n\r\n        // 设置 SVG 尺寸\r\n        const width = 900;\r\n        const height = 800;\r\n        svg.attr('width', width).attr('height', height);\r\n        \r\n        // 创建箭头\r\n        svg.append('defs').selectAll('marker')\r\n          .data(['arrow']) // 定义箭头的名称\r\n          .enter().append('marker')\r\n          .attr('id', d => d)\r\n          .attr('viewBox', '0 -5 10 10')\r\n          .attr('refX', 20) // 控制箭头位置\r\n          .attr('refY', 0)\r\n          .attr('markerWidth', 6)\r\n          .attr('markerHeight', 6)\r\n          .attr('orient', 'auto') // 根据路径自动定向箭头\r\n          .append('path')\r\n          .attr('d', 'M0,-5L10,0L0,5')\r\n          .attr('class', 'arrowhead'); // 自定义箭头的样式\r\n\r\n        // 绘制边\r\n        const links = svg.selectAll('.link')\r\n          .data(graphData.edges)\r\n          .enter().append('line')\r\n          .attr('class', 'link')\r\n          .style('stroke', 'deepskyblue') // 设置线段颜色\r\n          .attr('marker-end', 'url(#arrow)'); // 引用箭头\r\n\r\n        // 在线段上标注时间\r\n        links.append('text')\r\n          .attr('class', 'time-label')\r\n          .attr('dy', -5) // 调整时间标签的垂直位置\r\n          .text(d => d.time); // 显示时间值\r\n\r\n        // 绘制节点\r\n        const nodes = svg.selectAll('.node')\r\n          .data(graphData.nodes)\r\n          .enter().append('g')\r\n          .attr('class', 'node');\r\n\r\n        nodes.append('circle')\r\n          .attr('r', 8)\r\n          .attr('fill', 'orange');\r\n\r\n        // 添加节点名称\r\n        nodes.append('text')\r\n          .text(d => d.name)\r\n          .attr('x', 12)\r\n          .attr('y', 4);\r\n\r\n        // 添加节点和边的交互\r\n        nodes.call(d3.drag()\r\n          .on('start', dragStarted)\r\n          .on('drag', dragged)\r\n          .on('end', dragEnded)\r\n        );\r\n\r\n        // 定义拖动开始、拖动过程和拖动结束的函数\r\n        function dragStarted(d) {\r\n          if (!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n\r\n        function dragged(d) {\r\n          d.fx = d3.event.x;\r\n          d.fy = d3.event.y;\r\n        }\r\n\r\n        function dragEnded(d) {\r\n          if (!d3.event.active) simulation.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n        }\r\n\r\n        // 设置边的连接\r\n        links.each(function (d) {\r\n          const sourceNode = d3.select(this.parentNode).selectAll('.node')\r\n            .filter(node => node.name === d.source);\r\n\r\n          const targetNode = d3.select(this.parentNode).selectAll('.node')\r\n            .filter(node => node.name === d.target);\r\n          if (sourceNode && targetNode) {\r\n            const scaleFactor=1\r\n            // 计算线段长度，可以根据需要进行缩放\r\n            const length = d.time * scaleFactor; // 使用 scaleFactor 来控制长度\r\n            const angle = Math.atan2(targetNode.y - sourceNode.y, targetNode.x - sourceNode.x);\r\n            const x2 = sourceNode.x + length * Math.cos(angle);\r\n            const y2 = sourceNode.y + length * Math.sin(angle);\r\n            d3.select(this)\r\n              .attr('x1', sourceNode.x)\r\n              .attr('y1', sourceNode.y)\r\n              .attr('x2', x2)\r\n              .attr('y2', y2);\r\n          }\r\n        });\r\n\r\n        // 设置力导向布局的每一帧的动作\r\n        simulation.on('tick', () => {\r\n          links.attr('x1', d => d.source.x)\r\n            .attr('y1', d => d.source.y)\r\n            .attr('x2', d => d.target.x)\r\n            .attr('y2', d => d.target.y);\r\n\r\n          nodes.attr('transform', d => `translate(${d.x},${d.y})`);\r\n        });\r\n      }\r\n\r\n  },\r\n  mounted() {\r\n    this.fetchGraphData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  div{\r\n    height:80vh;\r\n    .box-card{\r\n      width:100%;\r\n      height: 100%;\r\n      overflow: auto;\r\n    }\r\n\r\n    .link {\r\n      stroke: deepskyblue; /* 线段颜色 */\r\n      stroke-width: 2px; /* 线段宽度 */\r\n    }\r\n\r\n    .arrowhead {\r\n      fill: black; /* 箭头颜色 */\r\n    }\r\n\r\n\r\n    .node text {\r\n      font-size: 12px; /* 节点名称文本大小 */\r\n    }\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}